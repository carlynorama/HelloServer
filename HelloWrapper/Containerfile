FROM swift:6.1.2-slim AS build

WORKDIR /staging

# Copy static swift backtrace binary to the staging area.
RUN cp "/usr/libexec/swift/linux/swift-backtrace-static" ./

FROM alpine

# Create a hummingbird user and group with /app as its home directory
# RUN useradd --user-group --create-home --system --skel /dev/null --home-dir /app hummingbird
# Create a group and user
# https://stackoverflow.com/questions/49955097/how-do-i-add-a-user-when-im-using-alpine-as-a-base-image
RUN addgroup \
    -S \
    hbGroup \
&& adduser \
    -S \
    hbUser \
    -h /app/ \
    -k /dev/null \
    -G hbGroup

# Switch to the new home directory
WORKDIR /app

COPY --chown=hbUser:hbGroup ./binary/ /app/

# Also tried this way. 
# COPY --from=build --chown=hbUser:hbGroup /staging/swift-backtrace-static /app/swift-backtrace
COPY --from=build --chown=hbUser:hbGroup /staging/ /app/

# Provide configuration needed by the built-in crash reporter and some sensible default behaviors.
# ENV SWIFT_BACKTRACE=enable=yes,sanitize=yes,threads=all,images=all,interactive=no
ENV SWIFT_BACKTRACE=enable=yes,sanitize=yes,threads=all,images=all,interactive=no,swift-backtrace=./swift-backtrace-static

# Ensure all further commands run as the hummingbird user
USER hbUser:hbGroup

# Let Docker bind to port 8080
EXPOSE 8080

# Start the Hummingbird service when the image is run, default to listening on 8080 in production environment
ENTRYPOINT ["./hello-world"]
CMD ["--hostname", "0.0.0.0", "--port", "8080"]